// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render with props 1`] = `
.emotion-0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  border: 1px solid rgba(0,0,0,0.1);
}

.emotion-0 * {
  box-sizing: border-box;
}

.emotion-0 .rt-table {
  -webkit-flex: auto 1;
  -ms-flex: auto 1;
  flex: auto 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  width: 100%;
  border-collapse: collapse;
  overflow: auto;
}

.emotion-0 .rt-thead {
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.emotion-0 .rt-thead.-headerGroups {
  background: rgba(0,0,0,0.03);
  border-bottom: 1px solid rgba(0,0,0,0.05);
}

.emotion-0 .rt-thead.-filters {
  border-bottom: 1px solid rgba(0,0,0,0.05);
}

.emotion-0 .rt-thead.-filters input,
.emotion-0 .rt-thead.-filters select {
  border: 1px solid rgba(0,0,0,0.1);
  background: #fff;
  padding: 5px 7px;
  font-size: inherit;
  border-radius: 3px;
  font-weight: normal;
  outline: none;
}

.emotion-0 .rt-thead.-filters .rt-th {
  border-right: 1px solid rgba(0,0,0,0.02);
}

.emotion-0 .rt-thead.-header {
  box-shadow: 0 2px 15px 0px rgba(0,0,0,0.15);
}

.emotion-0 .rt-thead .rt-tr {
  text-align: center;
}

.emotion-0 .rt-thead .rt-th,
.emotion-0 .rt-thead .rt-td {
  padding: 5px 5px;
  line-height: normal;
  position: relative;
  border-right: 1px solid rgba(0,0,0,0.05);
  -webkit-transition: box-shadow 0.3s cubic-bezier(0.175,0.885,0.32,1.275);
  transition: box-shadow 0.3s cubic-bezier(0.175,0.885,0.32,1.275);
  box-shadow: inset 0 0 0 0 transparent;
}

.emotion-0 .rt-thead .rt-th.-sort-asc,
.emotion-0 .rt-thead .rt-td.-sort-asc {
  box-shadow: inset 0 3px 0 0 rgba(0,0,0,0.6);
}

.emotion-0 .rt-thead .rt-th.-sort-desc,
.emotion-0 .rt-thead .rt-td.-sort-desc {
  box-shadow: inset 0 -3px 0 0 rgba(0,0,0,0.6);
}

.emotion-0 .rt-thead .rt-th.-cursor-pointer,
.emotion-0 .rt-thead .rt-td.-cursor-pointer {
  cursor: pointer;
}

.emotion-0 .rt-thead .rt-th:last-child,
.emotion-0 .rt-thead .rt-td:last-child {
  border-right: 0;
}

.emotion-0 .rt-thead .rt-resizable-header {
  overflow: visible;
}

.emotion-0 .rt-thead .rt-resizable-header:last-child {
  overflow: hidden;
}

.emotion-0 .rt-thead .rt-resizable-header-content {
  overflow: hidden;
  text-overflow: ellipsis;
}

.emotion-0 .rt-thead .rt-header-pivot {
  border-right-color: #f7f7f7;
}

.emotion-0 .rt-thead .rt-header-pivot:after,
.emotion-0 .rt-thead .rt-header-pivot:before {
  left: 100%;
  top: 50%;
  border: solid transparent;
  content: " ";
  height: 0;
  width: 0;
  position: absolute;
  pointer-events: none;
}

.emotion-0 .rt-thead .rt-header-pivot:after {
  border-color: rgba(255,255,255,0);
  border-left-color: #fff;
  border-width: 8px;
  margin-top: -8px;
}

.emotion-0 .rt-thead .rt-header-pivot:before {
  border-color: rgba(102,102,102,0);
  border-left-color: #f7f7f7;
  border-width: 10px;
  margin-top: -10px;
}

.emotion-0 .rt-tbody {
  -webkit-flex: 99999 1 auto;
  -ms-flex: 99999 1 auto;
  flex: 99999 1 auto;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  overflow: auto;
}

.emotion-0 .rt-tbody .rt-tr-group {
  border-bottom: solid 1px rgba(0,0,0,0.05);
}

.emotion-0 .rt-tbody .rt-tr-group:last-child {
  border-bottom: 0;
}

.emotion-0 .rt-tbody .rt-td {
  border-right: 1px solid rgba(0,0,0,0.02);
}

.emotion-0 .rt-tbody .rt-td:last-child {
  border-right: 0;
}

.emotion-0 .rt-tbody .rt-expandable {
  cursor: pointer;
}

.emotion-0 .rt-tr-group {
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
}

.emotion-0 .rt-tr {
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.emotion-0 .rt-th,
.emotion-0 .rt-td {
  -webkit-flex: 1 0 0px;
  -ms-flex: 1 0 0px;
  flex: 1 0 0px;
  white-space: nowrap;
  text-overflow: ellipsis;
  padding: 7px 5px;
  overflow: hidden;
  -webkit-transition: 0.3s ease;
  transition: 0.3s ease;
  -webkit-transition-property: width,min-width,padding,opacity;
  transition-property: width,min-width,padding,opacity;
}

.emotion-0 .rt-th.-hidden,
.emotion-0 .rt-td.-hidden {
  width: 0 !important;
  min-width: 0 !important;
  padding: 0 !important;
  border: 0 !important;
  opacity: 0 !important;
}

.emotion-0 .rt-expander {
  display: inline-block;
  position: relative;
  margin: 0;
  color: transparent;
  margin: 0 10px;
}

.emotion-0 .rt-expander:after {
  content: '';
  position: absolute;
  width: 0;
  height: 0;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%) rotate(-90deg);
  -ms-transform: translate(-50%,-50%) rotate(-90deg);
  transform: translate(-50%,-50%) rotate(-90deg);
  border-left: 5.04px solid transparent;
  border-right: 5.04px solid transparent;
  border-top: 7px solid rgba(0,0,0,0.8);
  -webkit-transition: all 0.3s cubic-bezier(0.175,0.885,0.32,1.275);
  transition: all 0.3s cubic-bezier(0.175,0.885,0.32,1.275);
  cursor: pointer;
}

.emotion-0 .rt-expander.-open:after {
  -webkit-transform: translate(-50%,-50%) rotate(0deg);
  -ms-transform: translate(-50%,-50%) rotate(0deg);
  transform: translate(-50%,-50%) rotate(0deg);
}

.emotion-0 .rt-resizer {
  display: inline-block;
  position: absolute;
  width: 36px;
  top: 0;
  bottom: 0;
  right: -18px;
  cursor: col-resize;
  z-index: 10;
}

.emotion-0 .rt-tfoot {
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  box-shadow: 0 0px 15px 0px rgba(0,0,0,0.15);
}

.emotion-0 .rt-tfoot .rt-td {
  border-right: 1px solid rgba(0,0,0,0.05);
}

.emotion-0 .rt-tfoot .rt-td:last-child {
  border-right: 0;
}

.emotion-0 .ReactTable.-striped .rt-tr.-odd {
  background: rgba(0,0,0,0.03);
}

.emotion-0 .ReactTable.-highlight .rt-tbody .rt-tr:not(.-padRow):hover {
  background: rgba(0,0,0,0.05);
}

.emotion-0 .-pagination {
  z-index: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  padding: 3px;
  box-shadow: 0 0px 15px 0px rgba(0,0,0,0.1);
  border-top: 2px solid rgba(0,0,0,0.1);
}

.emotion-0 .-pagination input,
.emotion-0 .-pagination select {
  border: 1px solid rgba(0,0,0,0.1);
  background: #fff;
  padding: 5px 7px;
  font-size: inherit;
  border-radius: 3px;
  font-weight: normal;
  outline: none;
}

.emotion-0 .-pagination .-btn {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  display: block;
  width: 100%;
  height: 100%;
  border: 0;
  border-radius: 3px;
  padding: 6px;
  font-size: 1em;
  color: rgba(0,0,0,0.6);
  background: rgba(0,0,0,0.1);
  -webkit-transition: all 0.1s ease;
  transition: all 0.1s ease;
  cursor: pointer;
  outline: none;
}

.emotion-0 .-pagination .-btn[disabled] {
  opacity: 0.5;
  cursor: default;
}

.emotion-0 .-pagination .-btn:not([disabled]):hover {
  background: rgba(0,0,0,0.3);
  color: #fff;
}

.emotion-0 .-pagination .-previous,
.emotion-0 .-pagination .-next {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  text-align: center;
}

.emotion-0 .-pagination .-center {
  -webkit-flex: 1.5;
  -ms-flex: 1.5;
  flex: 1.5;
  text-align: center;
  margin-bottom: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: space-around;
  -webkit-justify-content: space-around;
  -ms-flex-pack: space-around;
  justify-content: space-around;
}

.emotion-0 .-pagination .-pageInfo {
  display: inline-block;
  margin: 3px 10px;
  white-space: nowrap;
}

.emotion-0 .-pagination .-pageJump {
  display: inline-block;
}

.emotion-0 .-pagination .-pageJump input {
  width: 70px;
  text-align: center;
}

.emotion-0 .-pagination .-pageSizeOptions {
  margin: 3px 10px;
}

.emotion-0 .rt-noData {
  display: block;
  position: absolute;
  left: 50%;
  top: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  background: rgba(255,255,255,0.8);
  -webkit-transition: all 0.3s ease;
  transition: all 0.3s ease;
  z-index: 1;
  pointer-events: none;
  padding: 20px;
  color: rgba(0,0,0,0.5);
}

.emotion-0 .-loading {
  display: block;
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  background: rgba(255,255,255,0.8);
  -webkit-transition: all 0.3s ease;
  transition: all 0.3s ease;
  z-index: -1;
  opacity: 0;
  pointer-events: none;
}

.emotion-0 .-loading > div {
  position: absolute;
  display: block;
  text-align: center;
  width: 100%;
  top: 50%;
  left: 0;
  font-size: 15px;
  color: rgba(0,0,0,0.6);
  -webkit-transform: translateY(-52%);
  -ms-transform: translateY(-52%);
  transform: translateY(-52%);
  -webkit-transition: all 0.3s cubic-bezier(0.25,0.46,0.45,0.94);
  transition: all 0.3s cubic-bezier(0.25,0.46,0.45,0.94);
}

.emotion-0 .-loading.-active {
  opacity: 1;
  z-index: 2;
  pointer-events: all;
}

.emotion-0 .-loading.-active > div {
  -webkit-transform: translateY(50%);
  -ms-transform: translateY(50%);
  transform: translateY(50%);
}

.emotion-0 .rt-resizing .rt-th,
.emotion-0 .rt-resizing .rt-td {
  -webkit-transition: none !important;
  transition: none !important;
  cursor: col-resize;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

<div
  style={
    Object {
      "background": "#fff",
      "padding": "60px 20px",
    }
  }
>
  <div>
    <h2
      style={
        Object {
          "margin": 0,
        }
      }
    >
      Nested Teams for 
      ABC Team
    </h2>
  </div>
  <div
    className="ReactTable emotion-0 emotion-1"
    style={Object {}}
  >
    <div
      className="rt-table"
      role="grid"
      style={undefined}
    >
      <div
        className="rt-thead -header"
        style={
          Object {
            "minWidth": "400px",
          }
        }
      >
        <div
          className="rt-tr"
          role="row"
          style={undefined}
        >
          <div
            className="rt-th  rt-resizable-header -cursor-pointer"
            onClick={[Function]}
            role="columnheader"
            style={
              Object {
                "flex": "100 0 auto",
                "maxWidth": null,
                "width": "100px",
              }
            }
            tabIndex="-1"
          >
            <div
              className="rt-resizable-header-content"
            >
              ID
            </div>
            <div
              className="rt-resizer"
              onMouseDown={[Function]}
              onTouchStart={[Function]}
            />
          </div>
          <div
            className="rt-th  rt-resizable-header -cursor-pointer"
            onClick={[Function]}
            role="columnheader"
            style={
              Object {
                "flex": "100 0 auto",
                "maxWidth": null,
                "width": "100px",
              }
            }
            tabIndex="-1"
          >
            <div
              className="rt-resizable-header-content"
            >
              Name
            </div>
            <div
              className="rt-resizer"
              onMouseDown={[Function]}
              onTouchStart={[Function]}
            />
          </div>
          <div
            className="rt-th  rt-resizable-header -cursor-pointer"
            onClick={[Function]}
            role="columnheader"
            style={
              Object {
                "flex": "100 0 auto",
                "maxWidth": null,
                "width": "100px",
              }
            }
            tabIndex="-1"
          >
            <div
              className="rt-resizable-header-content"
            >
              Description
            </div>
            <div
              className="rt-resizer"
              onMouseDown={[Function]}
              onTouchStart={[Function]}
            />
          </div>
          <div
            className="rt-th  rt-resizable-header -cursor-pointer"
            onClick={[Function]}
            role="columnheader"
            style={
              Object {
                "flex": "100 0 auto",
                "maxWidth": null,
                "width": "100px",
              }
            }
            tabIndex="-1"
          >
            <div
              className="rt-resizable-header-content"
            >
              Users Count
            </div>
            <div
              className="rt-resizer"
              onMouseDown={[Function]}
              onTouchStart={[Function]}
            />
          </div>
        </div>
      </div>
      <div
        className="rt-tbody"
        style={
          Object {
            "minWidth": "400px",
          }
        }
      >
        <div
          className="rt-tr-group"
          role="rowgroup"
        >
          <div
            className="rt-tr -padRow -odd"
            role="row"
            style={Object {}}
          >
            <div
              className="rt-td"
              role="gridcell"
              style={
                Object {
                  "flex": "100 0 auto",
                  "maxWidth": null,
                  "width": "100px",
                }
              }
            >
              <span>
                 
              </span>
            </div>
            <div
              className="rt-td"
              role="gridcell"
              style={
                Object {
                  "flex": "100 0 auto",
                  "maxWidth": null,
                  "width": "100px",
                }
              }
            >
              <span>
                 
              </span>
            </div>
            <div
              className="rt-td"
              role="gridcell"
              style={
                Object {
                  "flex": "100 0 auto",
                  "maxWidth": null,
                  "width": "100px",
                }
              }
            >
              <span>
                 
              </span>
            </div>
            <div
              className="rt-td"
              role="gridcell"
              style={
                Object {
                  "flex": "100 0 auto",
                  "maxWidth": null,
                  "width": "100px",
                }
              }
            >
              <span>
                 
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div
      className="pagination-bottom"
    >
      <div
        className="-pagination"
        style={undefined}
      >
        <div
          className="-previous"
        >
          <button
            className="-btn"
            disabled={true}
            onClick={[Function]}
            type="button"
          >
            Previous
          </button>
        </div>
        <div
          className="-center"
        >
          <span
            className="-pageInfo"
          >
            Page
             
            <div
              className="-pageJump"
            >
              <input
                onBlur={[Function]}
                onChange={[Function]}
                onKeyPress={[Function]}
                type="number"
                value={1}
              />
            </div>
             
            of
             
            <span
              className="-totalPages"
            >
              1
            </span>
          </span>
          <span
            className="select-wrap -pageSizeOptions"
          >
            <select
              onChange={[Function]}
              value={5}
            >
              <option
                value={5}
              >
                5
                 
                rows
              </option>
              <option
                value={10}
              >
                10
                 
                rows
              </option>
              <option
                value={20}
              >
                20
                 
                rows
              </option>
              <option
                value={25}
              >
                25
                 
                rows
              </option>
              <option
                value={50}
              >
                50
                 
                rows
              </option>
              <option
                value={100}
              >
                100
                 
                rows
              </option>
            </select>
          </span>
        </div>
        <div
          className="-next"
        >
          <button
            className="-btn"
            disabled={true}
            onClick={[Function]}
            type="button"
          >
            Next
          </button>
        </div>
      </div>
    </div>
    <div
      className="rt-noData"
    >
      No Nested Teams Found.
    </div>
    <div
      className="-loading"
    >
      <div
        className="-loading-inner"
      >
        Loading...
      </div>
    </div>
  </div>
</div>
`;
