// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render create team 1`] = `
.emotion-0 {
  font-size: 48px;
  margin-top: .5em;
  margin-bottom: .5em;
}

.emotion-4 {
  font-size: 24px;
  margin-top: 1em;
  margin-bottom: 1em;
}

.emotion-10 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  margin: 0 0 16px;
}

.emotion-6 {
  display: block;
  width: 100%;
  font-size: 16px;
  color: #333;
  font-weight: 700;
}

.emotion-8 {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  display: block;
  width: 100%;
  height: 34px;
  padding: 6px 12px;
  font-size: 14px;
  line-height: 1.42857143;
  color: #555;
  background-color: #fff;
  background-image: none;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
  -webkit-transition: border-color ease-in-out .15s,box-shadow ease-in-out .15s;
  transition: border-color ease-in-out .15s,box-shadow ease-in-out .15s;
}

.emotion-8:focus {
  border-color: #66afe9;
  outline: 0;
  box-shadow: inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6);
}

.emotion-8::placeholder {
  color: #aaa;
}

.emotion-8::-ms-clear {
  display: none;
}

.emotion-38 {
  background: #eee;
  border-radius: 4px;
  border: 1px solid transparent;
  color: #333;
  display: inline-block;
  line-height: 1.5;
  padding: 6px 12px;
  text-align: center;
  -webkit-transition: all .2s cubic-bezier(0,.6,.3,1);
  transition: all .2s cubic-bezier(0,.6,.3,1);
  vertical-align: middle;
  white-space: nowrap;
  background-color: #337ab7;
  border-color: #337ab7;
  color: #fff;
}

.emotion-38:hover {
  background-color: #285f8f;
  border-color: #22527b;
  color: #fff;
}

.emotion-40 {
  background: #eee;
  border-radius: 4px;
  border: 1px solid transparent;
  color: #333;
  display: inline-block;
  line-height: 1.5;
  padding: 6px 12px;
  text-align: center;
  -webkit-transition: all .2s cubic-bezier(0,.6,.3,1);
  transition: all .2s cubic-bezier(0,.6,.3,1);
  vertical-align: middle;
  white-space: nowrap;
  background-color: transparent;
  border-color: none;
}

.emotion-40:hover {
  color: #D8D8D8;
  -webkit-text-decoration: underline;
  text-decoration: underline;
}

<div
  className="sc-bdVaJa hnxqsY"
>
  <div
    className="sc-bdVaJa hnxqsY"
  >
    <div
      className="emotion-2 emotion-3"
    >
      <h1
        className="emotion-0 emotion-1"
        fontSize={6}
      >
        Create Team
      </h1>
      <hr />
    </div>
    <form
      onSubmit={[Function]}
    >
      <h3
        className="emotion-4 emotion-5"
        fontSize={4}
      >
        Team Details
      </h3>
      <div
        className="emotion-10 emotion-11 "
      >
        <label
          className="emotion-6 emotion-7"
          color="black"
          fontSize="16px"
          fontWeight="bold"
        >
          ID
        </label>
        <input
          className="emotion-8 emotion-9"
          id="id"
          onBlur={[Function]}
          onChange={[Function]}
          placeholder="ID"
          type="text"
          value=""
        />
      </div>
      <div
        className="emotion-10 emotion-11 "
      >
        <label
          className="emotion-6 emotion-7"
          color="black"
          fontSize="16px"
          fontWeight="bold"
        >
          Name
        </label>
        <input
          className="emotion-8 emotion-9"
          id="name"
          onBlur={[Function]}
          onChange={[Function]}
          placeholder="Name"
          type="text"
          value=""
        />
      </div>
      <div
        className="emotion-10 emotion-11 "
      >
        <label
          className="emotion-6 emotion-7"
          color="black"
          fontSize="16px"
          fontWeight="bold"
        >
          Description
        </label>
        <input
          className="emotion-8 emotion-9"
          id="description"
          onBlur={[Function]}
          onChange={[Function]}
          placeholder="Description"
          type="text"
          value=""
        />
      </div>
      <h3
        className="emotion-4 emotion-5"
        fontSize={4}
      >
        Default Admin User
      </h3>
      <div
        className="emotion-10 emotion-11 "
      >
        <label
          className="emotion-6 emotion-7"
          color="black"
          fontSize="16px"
          fontWeight="bold"
        >
          User ID
        </label>
        <input
          className="emotion-8 emotion-9"
          id="userId"
          onBlur={[Function]}
          onChange={[Function]}
          placeholder="User ID"
          type="text"
          value=""
        />
      </div>
      <div
        className="emotion-10 emotion-11 "
      >
        <label
          className="emotion-6 emotion-7"
          color="black"
          fontSize="16px"
          fontWeight="bold"
        >
          User Name
        </label>
        <input
          className="emotion-8 emotion-9"
          id="userName"
          onBlur={[Function]}
          onChange={[Function]}
          placeholder="User Name"
          type="text"
          value=""
        />
      </div>
      <button
        className="emotion-38 emotion-39"
        type="submit"
        variant="primary"
      >
        Submit
      </button>
      <button
        className="emotion-40 emotion-39"
        onClick={[Function]}
        variant="link"
      >
        Cancel
      </button>
    </form>
  </div>
</div>
`;

exports[`should render delete team 1`] = `
.emotion-10 {
  background: #eee;
  border-radius: 4px;
  border: 1px solid transparent;
  color: #333;
  display: inline-block;
  line-height: 1.5;
  padding: 6px 12px;
  text-align: center;
  -webkit-transition: all .2s cubic-bezier(0,.6,.3,1);
  transition: all .2s cubic-bezier(0,.6,.3,1);
  vertical-align: middle;
  white-space: nowrap;
  background-color: #d9534f;
  border-color: darken(.05,#d9534f);
  color: #fff;
}

.emotion-10:hover {
  background-color: #c9302c;
  border-color: #b52b27;
  color: #fff;
}

.emotion-0 {
  font-size: 48px;
  margin-top: .5em;
  margin-bottom: .5em;
}

.emotion-4 {
  font-size: 24px;
  margin-top: 1em;
  margin-bottom: 1em;
}

.emotion-12 {
  background: #eee;
  border-radius: 4px;
  border: 1px solid transparent;
  color: #333;
  display: inline-block;
  line-height: 1.5;
  padding: 6px 12px;
  text-align: center;
  -webkit-transition: all .2s cubic-bezier(0,.6,.3,1);
  transition: all .2s cubic-bezier(0,.6,.3,1);
  vertical-align: middle;
  white-space: nowrap;
  background-color: transparent;
  border-color: none;
}

.emotion-12:hover {
  color: #D8D8D8;
  -webkit-text-decoration: underline;
  text-decoration: underline;
}

<div
  className="sc-bdVaJa hnxqsY"
>
  <div
    className="emotion-2 emotion-3"
  >
    <h1
      className="emotion-0 emotion-1"
      fontSize={6}
    >
      Delete Team
    </h1>
    <hr />
  </div>
  <h3
    className="emotion-4 emotion-5"
    fontSize={4}
  >
    Are you sure you want to delete 
    Team Name
    ?
  </h3>
  <p
    className="emotion-8 emotion-9"
  >
    This action 
    <span
      className="emotion-6 emotion-7"
    >
      CANNOT
    </span>
     be undone.
  </p>
  <button
    className="emotion-10 emotion-11"
    onClick={[Function]}
    variant="danger"
  >
    DELETE
  </button>
  <button
    className="emotion-12 emotion-11"
    onClick={[Function]}
    variant="link"
  >
    CANCEL
  </button>
</div>
`;

exports[`should render error in unknown state 1`] = `
<h1>
  There was an error fetching teams.
</h1>
`;

exports[`should render update team 1`] = `
.emotion-0 {
  font-size: 48px;
  margin-top: .5em;
  margin-bottom: .5em;
}

.emotion-8 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  margin: 0 0 16px;
}

.emotion-4 {
  display: block;
  width: 100%;
  font-size: 16px;
  color: #333;
  font-weight: 700;
}

.success .emotion-4 {
  color: #3c763d;
}

.emotion-6 {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  display: block;
  width: 100%;
  height: 34px;
  padding: 6px 12px;
  font-size: 14px;
  line-height: 1.42857143;
  color: #555;
  background-color: #fff;
  background-image: none;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
  -webkit-transition: border-color ease-in-out .15s,box-shadow ease-in-out .15s;
  transition: border-color ease-in-out .15s,box-shadow ease-in-out .15s;
}

.emotion-6:focus {
  border-color: #66afe9;
  outline: 0;
  box-shadow: inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6);
}

.success .emotion-6 {
  border-color: #3c763d;
  box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
}

.success .emotion-6:focus {
  box-shadow: inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(60,118,61,.6);
}

.emotion-6::placeholder {
  color: #aaa;
}

.success .emotion-6::-webkit-input-placeholder {
  color: rgba(60,118,61,.4);
}

.success .emotion-6::-moz-placeholder {
  color: rgba(60,118,61,.4);
}

.success .emotion-6:-ms-input-placeholder {
  color: rgba(60,118,61,.4);
}

.success .emotion-6::placeholder {
  color: rgba(60,118,61,.4);
}

.emotion-6::-ms-clear {
  display: none;
}

.emotion-22 {
  background: #eee;
  border-radius: 4px;
  border: 1px solid transparent;
  color: #333;
  display: inline-block;
  line-height: 1.5;
  padding: 6px 12px;
  text-align: center;
  -webkit-transition: all .2s cubic-bezier(0,.6,.3,1);
  transition: all .2s cubic-bezier(0,.6,.3,1);
  vertical-align: middle;
  white-space: nowrap;
  background-color: #337ab7;
  border-color: #337ab7;
  color: #fff;
}

.emotion-22:hover {
  background-color: #285f8f;
  border-color: #22527b;
  color: #fff;
}

.emotion-24 {
  background: #eee;
  border-radius: 4px;
  border: 1px solid transparent;
  color: #333;
  display: inline-block;
  line-height: 1.5;
  padding: 6px 12px;
  text-align: center;
  -webkit-transition: all .2s cubic-bezier(0,.6,.3,1);
  transition: all .2s cubic-bezier(0,.6,.3,1);
  vertical-align: middle;
  white-space: nowrap;
  background-color: transparent;
  border-color: none;
}

.emotion-24:hover {
  color: #D8D8D8;
  -webkit-text-decoration: underline;
  text-decoration: underline;
}

<div
  className="sc-bdVaJa hnxqsY"
>
  <div
    className="emotion-2 emotion-3"
  >
    <h1
      className="emotion-0 emotion-1"
      fontSize={6}
    >
      Update Team
    </h1>
    <hr />
  </div>
  <form
    onSubmit={[Function]}
  >
    <div
      className="emotion-8 emotion-9 "
    >
      <label
        className="emotion-4 emotion-5"
        color="black"
        fontSize="16px"
        fontWeight="bold"
      >
        ID
      </label>
      <input
        className="emotion-6 emotion-7"
        disabled={true}
        placeholder="ID"
        type="text"
        value="1"
      />
    </div>
    <div
      className="emotion-8 emotion-9 success"
    >
      <label
        className="emotion-4 emotion-5"
        color="black"
        fontSize="16px"
        fontWeight="bold"
      >
        Name
      </label>
      <input
        className="emotion-6 emotion-7"
        onBlur={[Function]}
        onChange={[Function]}
        placeholder="Name"
        type="text"
        value="Team Name"
      />
    </div>
    <div
      className="emotion-8 emotion-9 success"
    >
      <label
        className="emotion-4 emotion-5"
        color="black"
        fontSize="16px"
        fontWeight="bold"
      >
        Description
      </label>
      <input
        className="emotion-6 emotion-7"
        onBlur={[Function]}
        onChange={[Function]}
        placeholder="Description"
        type="text"
        value="Team Description"
      />
    </div>
    <button
      className="emotion-22 emotion-23"
      type="submit"
      variant="primary"
    >
      Submit
    </button>
    <button
      className="emotion-24 emotion-23"
      onClick={[Function]}
      variant="link"
    >
      Cancel
    </button>
  </form>
</div>
`;

exports[`should render with error state 1`] = `
<h1>
  There was an error fetching teams.
</h1>
`;

exports[`should render with props 1`] = `
Array [
  .emotion-8 {
  margin: 0 15px;
}

.emotion-8 > button,
.emotion-8 > a {
  margin-left: .25rem;
  margin-right: .25rem;
}

.emotion-0 {
  background: #eee;
  border-radius: 4px;
  border: 1px solid transparent;
  color: #333;
  display: inline-block;
  line-height: 1.5;
  padding: 6px 12px;
  text-align: center;
  -webkit-transition: all .2s cubic-bezier(0,.6,.3,1);
  transition: all .2s cubic-bezier(0,.6,.3,1);
  vertical-align: middle;
  white-space: nowrap;
  background-color: #5cb85c;
  border-color: darken(.05,#5cb85c);
  color: #fff;
}

.emotion-0:hover {
  background-color: #449d44;
  border-color: #3d8b3d;
  color: #fff;
}

.emotion-2 {
  background: #eee;
  border-radius: 4px;
  border: 1px solid transparent;
  color: #333;
  display: inline-block;
  line-height: 1.5;
  padding: 6px 12px;
  text-align: center;
  -webkit-transition: all .2s cubic-bezier(0,.6,.3,1);
  transition: all .2s cubic-bezier(0,.6,.3,1);
  vertical-align: middle;
  white-space: nowrap;
  background-color: #5bc0de;
  border-color: darken(.05,#5bc0de);
  color: #fff;
}

.emotion-2:hover {
  background-color: #31b0d5;
  border-color: #28a1c5;
  color: #fff;
}

.emotion-6 {
  background: #eee;
  border-radius: 4px;
  border: 1px solid transparent;
  color: #333;
  display: inline-block;
  line-height: 1.5;
  padding: 6px 12px;
  text-align: center;
  -webkit-transition: all .2s cubic-bezier(0,.6,.3,1);
  transition: all .2s cubic-bezier(0,.6,.3,1);
  vertical-align: middle;
  white-space: nowrap;
  background-color: #d9534f;
  border-color: darken(.05,#d9534f);
  color: #fff;
}

.emotion-6:hover {
  background-color: #c9302c;
  border-color: #b52b27;
  color: #fff;
}

<div
    className="sc-bdVaJa dXiGPu"
  >
    <div
      className="emotion-8 emotion-9"
      role="toolbar"
    >
      <button
        className="emotion-0 emotion-1"
        onClick={[Function]}
        variant="success"
      >
        New Team
      </button>
      <div
        onBlur={[Function]}
        onClick={[Function]}
        onContextMenu={undefined}
        onFocus={[Function]}
        onMouseDown={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onTouchStart={[Function]}
        style={
          Object {
            "display": "inline-block",
            "padding": "0 10px",
          }
        }
      >
        <button
          className="emotion-2 emotion-1"
          disabled={true}
          onClick={[Function]}
          style={
            Object {
              "pointerEvents": "none",
            }
          }
          variant="info"
        >
          View Team
        </button>
      </div>
      <div
        onBlur={[Function]}
        onClick={[Function]}
        onContextMenu={undefined}
        onFocus={[Function]}
        onMouseDown={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onTouchStart={[Function]}
        style={
          Object {
            "display": "inline-block",
            "padding": "0 10px 0 0",
          }
        }
      >
        <button
          className="emotion-2 emotion-1"
          disabled={true}
          onClick={[Function]}
          style={
            Object {
              "pointerEvents": "none",
            }
          }
          variant="info"
        >
          Update Team
        </button>
      </div>
      <div
        onBlur={[Function]}
        onClick={[Function]}
        onContextMenu={undefined}
        onFocus={[Function]}
        onMouseDown={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onTouchStart={[Function]}
        style={
          Object {
            "display": "inline-block",
          }
        }
      >
        <button
          className="emotion-6 emotion-1"
          disabled={true}
          onClick={[Function]}
          style={
            Object {
              "pointerEvents": "none",
            }
          }
          variant="danger"
        >
          Delete Team
        </button>
      </div>
    </div>
  </div>,
  <div
    style={
      Object {
        "margin": "30px 0",
      }
    }
  />,
  .emotion-0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  border: 1px solid rgba(0,0,0,0.1);
}

.emotion-0 * {
  box-sizing: border-box;
}

.emotion-0 .rt-table {
  -webkit-flex: auto 1;
  -ms-flex: auto 1;
  flex: auto 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  width: 100%;
  border-collapse: collapse;
  overflow: auto;
}

.emotion-0 .rt-thead {
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.emotion-0 .rt-thead.-headerGroups {
  background: rgba(0,0,0,0.03);
  border-bottom: 1px solid rgba(0,0,0,0.05);
}

.emotion-0 .rt-thead.-filters {
  border-bottom: 1px solid rgba(0,0,0,0.05);
}

.emotion-0 .rt-thead.-filters input,
.emotion-0 .rt-thead.-filters select {
  border: 1px solid rgba(0,0,0,0.1);
  background: #fff;
  padding: 5px 7px;
  font-size: inherit;
  border-radius: 3px;
  font-weight: normal;
  outline: none;
}

.emotion-0 .rt-thead.-filters .rt-th {
  border-right: 1px solid rgba(0,0,0,0.02);
}

.emotion-0 .rt-thead.-header {
  box-shadow: 0 2px 15px 0px rgba(0,0,0,0.15);
}

.emotion-0 .rt-thead .rt-tr {
  text-align: center;
}

.emotion-0 .rt-thead .rt-th,
.emotion-0 .rt-thead .rt-td {
  padding: 5px 5px;
  line-height: normal;
  position: relative;
  border-right: 1px solid rgba(0,0,0,0.05);
  -webkit-transition: box-shadow 0.3s cubic-bezier(0.175,0.885,0.32,1.275);
  transition: box-shadow 0.3s cubic-bezier(0.175,0.885,0.32,1.275);
  box-shadow: inset 0 0 0 0 transparent;
}

.emotion-0 .rt-thead .rt-th.-sort-asc,
.emotion-0 .rt-thead .rt-td.-sort-asc {
  box-shadow: inset 0 3px 0 0 rgba(0,0,0,0.6);
}

.emotion-0 .rt-thead .rt-th.-sort-desc,
.emotion-0 .rt-thead .rt-td.-sort-desc {
  box-shadow: inset 0 -3px 0 0 rgba(0,0,0,0.6);
}

.emotion-0 .rt-thead .rt-th.-cursor-pointer,
.emotion-0 .rt-thead .rt-td.-cursor-pointer {
  cursor: pointer;
}

.emotion-0 .rt-thead .rt-th:last-child,
.emotion-0 .rt-thead .rt-td:last-child {
  border-right: 0;
}

.emotion-0 .rt-thead .rt-resizable-header {
  overflow: visible;
}

.emotion-0 .rt-thead .rt-resizable-header:last-child {
  overflow: hidden;
}

.emotion-0 .rt-thead .rt-resizable-header-content {
  overflow: hidden;
  text-overflow: ellipsis;
}

.emotion-0 .rt-thead .rt-header-pivot {
  border-right-color: #f7f7f7;
}

.emotion-0 .rt-thead .rt-header-pivot:after,
.emotion-0 .rt-thead .rt-header-pivot:before {
  left: 100%;
  top: 50%;
  border: solid transparent;
  content: " ";
  height: 0;
  width: 0;
  position: absolute;
  pointer-events: none;
}

.emotion-0 .rt-thead .rt-header-pivot:after {
  border-color: rgba(255,255,255,0);
  border-left-color: #fff;
  border-width: 8px;
  margin-top: -8px;
}

.emotion-0 .rt-thead .rt-header-pivot:before {
  border-color: rgba(102,102,102,0);
  border-left-color: #f7f7f7;
  border-width: 10px;
  margin-top: -10px;
}

.emotion-0 .rt-tbody {
  -webkit-flex: 99999 1 auto;
  -ms-flex: 99999 1 auto;
  flex: 99999 1 auto;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  overflow: auto;
}

.emotion-0 .rt-tbody .rt-tr-group {
  border-bottom: solid 1px rgba(0,0,0,0.05);
}

.emotion-0 .rt-tbody .rt-tr-group:last-child {
  border-bottom: 0;
}

.emotion-0 .rt-tbody .rt-td {
  border-right: 1px solid rgba(0,0,0,0.02);
}

.emotion-0 .rt-tbody .rt-td:last-child {
  border-right: 0;
}

.emotion-0 .rt-tbody .rt-expandable {
  cursor: pointer;
}

.emotion-0 .rt-tr-group {
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
}

.emotion-0 .rt-tr {
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.emotion-0 .rt-th,
.emotion-0 .rt-td {
  -webkit-flex: 1 0 0px;
  -ms-flex: 1 0 0px;
  flex: 1 0 0px;
  white-space: nowrap;
  text-overflow: ellipsis;
  padding: 7px 5px;
  overflow: hidden;
  -webkit-transition: 0.3s ease;
  transition: 0.3s ease;
  -webkit-transition-property: width,min-width,padding,opacity;
  transition-property: width,min-width,padding,opacity;
}

.emotion-0 .rt-th.-hidden,
.emotion-0 .rt-td.-hidden {
  width: 0 !important;
  min-width: 0 !important;
  padding: 0 !important;
  border: 0 !important;
  opacity: 0 !important;
}

.emotion-0 .rt-expander {
  display: inline-block;
  position: relative;
  margin: 0;
  color: transparent;
  margin: 0 10px;
}

.emotion-0 .rt-expander:after {
  content: '';
  position: absolute;
  width: 0;
  height: 0;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%,-50%) rotate(-90deg);
  -ms-transform: translate(-50%,-50%) rotate(-90deg);
  transform: translate(-50%,-50%) rotate(-90deg);
  border-left: 5.04px solid transparent;
  border-right: 5.04px solid transparent;
  border-top: 7px solid rgba(0,0,0,0.8);
  -webkit-transition: all 0.3s cubic-bezier(0.175,0.885,0.32,1.275);
  transition: all 0.3s cubic-bezier(0.175,0.885,0.32,1.275);
  cursor: pointer;
}

.emotion-0 .rt-expander.-open:after {
  -webkit-transform: translate(-50%,-50%) rotate(0deg);
  -ms-transform: translate(-50%,-50%) rotate(0deg);
  transform: translate(-50%,-50%) rotate(0deg);
}

.emotion-0 .rt-resizer {
  display: inline-block;
  position: absolute;
  width: 36px;
  top: 0;
  bottom: 0;
  right: -18px;
  cursor: col-resize;
  z-index: 10;
}

.emotion-0 .rt-tfoot {
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  box-shadow: 0 0px 15px 0px rgba(0,0,0,0.15);
}

.emotion-0 .rt-tfoot .rt-td {
  border-right: 1px solid rgba(0,0,0,0.05);
}

.emotion-0 .rt-tfoot .rt-td:last-child {
  border-right: 0;
}

.emotion-0 .ReactTable.-striped .rt-tr.-odd {
  background: rgba(0,0,0,0.03);
}

.emotion-0 .ReactTable.-highlight .rt-tbody .rt-tr:not(.-padRow):hover {
  background: rgba(0,0,0,0.05);
}

.emotion-0 .-pagination {
  z-index: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  padding: 3px;
  box-shadow: 0 0px 15px 0px rgba(0,0,0,0.1);
  border-top: 2px solid rgba(0,0,0,0.1);
}

.emotion-0 .-pagination input,
.emotion-0 .-pagination select {
  border: 1px solid rgba(0,0,0,0.1);
  background: #fff;
  padding: 5px 7px;
  font-size: inherit;
  border-radius: 3px;
  font-weight: normal;
  outline: none;
}

.emotion-0 .-pagination .-btn {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  display: block;
  width: 100%;
  height: 100%;
  border: 0;
  border-radius: 3px;
  padding: 6px;
  font-size: 1em;
  color: rgba(0,0,0,0.6);
  background: rgba(0,0,0,0.1);
  -webkit-transition: all 0.1s ease;
  transition: all 0.1s ease;
  cursor: pointer;
  outline: none;
}

.emotion-0 .-pagination .-btn[disabled] {
  opacity: 0.5;
  cursor: default;
}

.emotion-0 .-pagination .-btn:not([disabled]):hover {
  background: rgba(0,0,0,0.3);
  color: #fff;
}

.emotion-0 .-pagination .-previous,
.emotion-0 .-pagination .-next {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  text-align: center;
}

.emotion-0 .-pagination .-center {
  -webkit-flex: 1.5;
  -ms-flex: 1.5;
  flex: 1.5;
  text-align: center;
  margin-bottom: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: space-around;
  -webkit-justify-content: space-around;
  -ms-flex-pack: space-around;
  justify-content: space-around;
}

.emotion-0 .-pagination .-pageInfo {
  display: inline-block;
  margin: 3px 10px;
  white-space: nowrap;
}

.emotion-0 .-pagination .-pageJump {
  display: inline-block;
}

.emotion-0 .-pagination .-pageJump input {
  width: 70px;
  text-align: center;
}

.emotion-0 .-pagination .-pageSizeOptions {
  margin: 3px 10px;
}

.emotion-0 .rt-noData {
  display: block;
  position: absolute;
  left: 50%;
  top: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  background: rgba(255,255,255,0.8);
  -webkit-transition: all 0.3s ease;
  transition: all 0.3s ease;
  z-index: 1;
  pointer-events: none;
  padding: 20px;
  color: rgba(0,0,0,0.5);
}

.emotion-0 .-loading {
  display: block;
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  background: rgba(255,255,255,0.8);
  -webkit-transition: all 0.3s ease;
  transition: all 0.3s ease;
  z-index: -1;
  opacity: 0;
  pointer-events: none;
}

.emotion-0 .-loading > div {
  position: absolute;
  display: block;
  text-align: center;
  width: 100%;
  top: 50%;
  left: 0;
  font-size: 15px;
  color: rgba(0,0,0,0.6);
  -webkit-transform: translateY(-52%);
  -ms-transform: translateY(-52%);
  transform: translateY(-52%);
  -webkit-transition: all 0.3s cubic-bezier(0.25,0.46,0.45,0.94);
  transition: all 0.3s cubic-bezier(0.25,0.46,0.45,0.94);
}

.emotion-0 .-loading.-active {
  opacity: 1;
  z-index: 2;
  pointer-events: all;
}

.emotion-0 .-loading.-active > div {
  -webkit-transform: translateY(50%);
  -ms-transform: translateY(50%);
  transform: translateY(50%);
}

.emotion-0 .rt-resizing .rt-th,
.emotion-0 .rt-resizing .rt-td {
  -webkit-transition: none !important;
  transition: none !important;
  cursor: col-resize;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

<div
    className="sc-bdVaJa hnxqsY"
  >
    <div
      className="ReactTable emotion-0 emotion-1"
      style={Object {}}
    >
      <div
        className="rt-table"
        role="grid"
        style={undefined}
      >
        <div
          className="rt-thead -header"
          style={
            Object {
              "minWidth": "480px",
            }
          }
        >
          <div
            className="rt-tr"
            role="row"
            style={undefined}
          >
            <div
              className="rt-th"
              onClick={[Function]}
              role="columnheader"
              style={
                Object {
                  "flex": "35 0 auto",
                  "maxWidth": "35px",
                  "width": "35px",
                }
              }
              tabIndex="-1"
            >
              <div
                className=""
              />
            </div>
            <div
              className="rt-th  rt-resizable-header"
              onClick={[Function]}
              role="columnheader"
              style={
                Object {
                  "flex": "45 0 auto",
                  "maxWidth": "45px",
                  "width": "45px",
                }
              }
              tabIndex="-1"
            >
              <div
                className="rt-resizable-header-content"
              >
                <div />
              </div>
              <div
                className="rt-resizer"
                onMouseDown={[Function]}
                onTouchStart={[Function]}
              />
            </div>
            <div
              className="rt-th  rt-resizable-header -cursor-pointer"
              onClick={[Function]}
              role="columnheader"
              style={
                Object {
                  "flex": "100 0 auto",
                  "maxWidth": null,
                  "width": "100px",
                }
              }
              tabIndex="-1"
            >
              <div
                className="rt-resizable-header-content"
              >
                ID
              </div>
              <div
                className="rt-resizer"
                onMouseDown={[Function]}
                onTouchStart={[Function]}
              />
            </div>
            <div
              className="rt-th  rt-resizable-header -cursor-pointer"
              onClick={[Function]}
              role="columnheader"
              style={
                Object {
                  "flex": "100 0 auto",
                  "maxWidth": null,
                  "width": "100px",
                }
              }
              tabIndex="-1"
            >
              <div
                className="rt-resizable-header-content"
              >
                Name
              </div>
              <div
                className="rt-resizer"
                onMouseDown={[Function]}
                onTouchStart={[Function]}
              />
            </div>
            <div
              className="rt-th  rt-resizable-header -cursor-pointer"
              onClick={[Function]}
              role="columnheader"
              style={
                Object {
                  "flex": "100 0 auto",
                  "maxWidth": null,
                  "width": "100px",
                }
              }
              tabIndex="-1"
            >
              <div
                className="rt-resizable-header-content"
              >
                Description
              </div>
              <div
                className="rt-resizer"
                onMouseDown={[Function]}
                onTouchStart={[Function]}
              />
            </div>
            <div
              className="rt-th  rt-resizable-header -cursor-pointer"
              onClick={[Function]}
              role="columnheader"
              style={
                Object {
                  "flex": "100 0 auto",
                  "maxWidth": null,
                  "width": "100px",
                }
              }
              tabIndex="-1"
            >
              <div
                className="rt-resizable-header-content"
              >
                Users Count
              </div>
              <div
                className="rt-resizer"
                onMouseDown={[Function]}
                onTouchStart={[Function]}
              />
            </div>
          </div>
        </div>
        <div
          className="rt-tbody"
          style={
            Object {
              "minWidth": "480px",
            }
          }
        >
          <div
            className="rt-tr-group"
            role="rowgroup"
          >
            <div
              className="rt-tr -padRow -odd"
              role="row"
              style={Object {}}
            >
              <div
                className="rt-td"
                role="gridcell"
                style={
                  Object {
                    "flex": "35 0 auto",
                    "maxWidth": "35px",
                    "width": "35px",
                  }
                }
              >
                <span>
                   
                </span>
              </div>
              <div
                className="rt-td"
                role="gridcell"
                style={
                  Object {
                    "flex": "45 0 auto",
                    "maxWidth": "45px",
                    "width": "45px",
                  }
                }
              >
                <span>
                   
                </span>
              </div>
              <div
                className="rt-td"
                role="gridcell"
                style={
                  Object {
                    "flex": "100 0 auto",
                    "maxWidth": null,
                    "width": "100px",
                  }
                }
              >
                <span>
                   
                </span>
              </div>
              <div
                className="rt-td"
                role="gridcell"
                style={
                  Object {
                    "flex": "100 0 auto",
                    "maxWidth": null,
                    "width": "100px",
                  }
                }
              >
                <span>
                   
                </span>
              </div>
              <div
                className="rt-td"
                role="gridcell"
                style={
                  Object {
                    "flex": "100 0 auto",
                    "maxWidth": null,
                    "width": "100px",
                  }
                }
              >
                <span>
                   
                </span>
              </div>
              <div
                className="rt-td"
                role="gridcell"
                style={
                  Object {
                    "flex": "100 0 auto",
                    "maxWidth": null,
                    "width": "100px",
                  }
                }
              >
                <span>
                   
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div
        className="pagination-bottom"
      >
        <div
          className="-pagination"
          style={undefined}
        >
          <div
            className="-previous"
          >
            <button
              className="-btn"
              disabled={true}
              onClick={[Function]}
              type="button"
            >
              Previous
            </button>
          </div>
          <div
            className="-center"
          >
            <span
              className="-pageInfo"
            >
              Page
               
              <div
                className="-pageJump"
              >
                <input
                  onBlur={[Function]}
                  onChange={[Function]}
                  onKeyPress={[Function]}
                  type="number"
                  value={1}
                />
              </div>
               
              of
               
              <span
                className="-totalPages"
              >
                1
              </span>
            </span>
            <span
              className="select-wrap -pageSizeOptions"
            >
              <select
                onChange={[Function]}
                value={5}
              >
                <option
                  value={5}
                >
                  5
                   
                  rows
                </option>
                <option
                  value={10}
                >
                  10
                   
                  rows
                </option>
                <option
                  value={20}
                >
                  20
                   
                  rows
                </option>
                <option
                  value={25}
                >
                  25
                   
                  rows
                </option>
                <option
                  value={50}
                >
                  50
                   
                  rows
                </option>
                <option
                  value={100}
                >
                  100
                   
                  rows
                </option>
              </select>
            </span>
          </div>
          <div
            className="-next"
          >
            <button
              className="-btn"
              disabled={true}
              onClick={[Function]}
              type="button"
            >
              Next
            </button>
          </div>
        </div>
      </div>
      <div
        className="rt-noData"
      >
        No Teams Found.
      </div>
      <div
        className="-loading"
      >
        <div
          className="-loading-inner"
        >
          Loading...
        </div>
      </div>
    </div>
  </div>,
]
`;
